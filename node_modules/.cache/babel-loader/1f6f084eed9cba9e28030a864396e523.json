{"ast":null,"code":"import _slicedToArray from \"/Users/elliotgoldingfrank/bikephil-frontend/bikephilreact/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport fetch from 'cross-fetch';\nexport const CLICK_MARKER = 'CLICK_MARKER';\nexport const EXPLORE_PANEL = 'EXPLORE_PANEL';\nexport const SEARCH_PANEL = 'SEARCH_PANEL';\nexport const CLICK_PANEL = 'CLICK_PANEL'; // Action creators\n\nexport const REQUEST_API_DATA = 'REQUEST_API_DATA';\nexport const RECEIVE_API_DATA_SUCCESS = 'REQUEST_API_DATA_SUCCESS';\nexport const RECEIVE_API_DATA_FAILURE = 'REQUEST_API_DATA_FAILURE';\nexport const REQUEST_DISTANCE_MATRIX = 'REQUEST_DISTANCE_MATRIX';\nexport const RECEIVE_DISTANCE_MATRIX_SUCCESS = 'RECEIVE_DISTANCE_MATRIX_SUCCESS';\nexport const RECEIVE_DISTANCE_MATRIX_FAILURE = 'RECEIVE_DISTANCE_MATRIX_FAILURE';\nexport function clickMarker(id, isSelected) {\n  return {\n    type: CLICK_MARKER,\n    id,\n    isSelected\n  };\n}\nexport function clickPanel(panel) {\n  return {\n    type: CLICK_PANEL,\n    panel\n  };\n} //  Network Actions\n\nfunction produceStationsByID(stationsFullInfomation) {\n  const stationsByID = {};\n\n  for (let _ref of Object.entries(stationsFullInfomation)) {\n    var _ref2 = _slicedToArray(_ref, 2);\n\n    let id = _ref2[0];\n    let value = _ref2[1];\n    stationsByID[id] = subsetInfo(value);\n  }\n\n  return stationsByID;\n}\n\nfunction subsetInfo(s) {\n  const reducedStationInfo = {\n    coordinates: [s.geometry.coordinates[1], s.geometry.coordinates[0]],\n    id: s.properties.kioskId,\n    name: s.properties.name,\n    addressStreet: s.properties.addressStreet,\n    bikesAvailable: s.properties.bikesAvailable,\n    docksAvailable: s.properties.docksAvailable\n  };\n  return reducedStationInfo;\n}\n\nexport function requestAPIData() {\n  return {\n    type: REQUEST_API_DATA\n  };\n}\nexport function receiveAPIData(json) {\n  return {\n    type: RECEIVE_API_DATA_SUCCESS,\n    bikeTimestamp: json.timestamp,\n    stationsByID: produceStationsByID(json.stations),\n    weather: json.weather\n  };\n}\nexport function fetchAPIData() {\n  return dispatch => {\n    dispatch(requestAPIData);\n    return fetch('https://bike-philly.herokuapp.com/api/v1/stations').then(response => response.json(), error => console.log('An error occurred.', error)).then(json => dispatch(receiveAPIData(json)));\n  };\n}\nexport function requestDistanceMatrix() {\n  return {\n    type: REQUEST_DISTANCE_MATRIX\n  };\n}\n\nfunction getCoordinateReference(stationsByID) {\n  return Object.entries(stationsByID).map(([id, data]) => [id, data.coordinates]);\n}\n\nfunction zip(arr1, arr2) {\n  // assumes they are the same length\n  let newArr = [];\n\n  for (let i = 0; i < arr1.length; i++) {\n    newArr.push([arr1[i], arr2[i]]);\n  }\n\n  return newArr;\n}\n\nfunction getClosestStationCoordinates(ids, lookup) {\n  return ids.map(x => lookup[x].coordinates);\n}\n\nexport function fetchDistanceMatrix(coordinatesToLookUp) {\n  return (dispatch, getState) => {\n    dispatch(requestDistanceMatrix());\n    let stationsByID = getState().api.stationsByID;\n    let coordinateReference = getCoordinateReference(stationsByID);\n    let estimatedDistances = estimateClosestCoordinates(coordinatesToLookUp, coordinateReference); // Get closest 24 stations\n\n    let closestStationIDs = estimatedDistances.slice(0, 24).map(x => x[0]);\n    console.log(JSON.stringify(closestStationIDs));\n    let closestStationCoordinates = getClosestStationCoordinates(closestStationIDs, stationsByID);\n    console.log(JSON.stringify(closestStationCoordinates)); // Append coordinates to lookup to front\n\n    let coordinateArray = [coordinatesToLookUp, ...closestStationCoordinates];\n    console.log(JSON.stringify(coordinateArray));\n    return fetch(constructDistanceMatrixURL(coordinateArray)).then(response => response.json(), error => console.log('An error occurred.', error)).then(json => {\n      console.log(closestStationIDs);\n      console.log(json.distances[0]);\n      return null;\n      let distanceArray = zip(['0', closestStationIDs], json.distances[0]);\n      alert(distanceArray);\n      dispatch(receiveDistanceMatrix(distanceArray));\n    });\n  };\n}\nexport function receiveDistanceMatrix(distanceArray) {\n  return {\n    type: RECEIVE_DISTANCE_MATRIX_SUCCESS,\n    distanceArray\n  };\n}\nlet ACCESS_TOKEN = 'pk.eyJ1IjoiZWxsaW90Z2ZyYW5rIiwiYSI6ImNqd3V4aXFzZTBkMjA0YW4xNGFwNnU4cWwifQ.BsUA_68pUHaCU7v4PCKLKw';\nexport function constructSearchUrl(searchTerm) {\n  let params = {\n    bbox: '-76,39,-75,41',\n    access_token: ACCESS_TOKEN\n  };\n  let esc = encodeURIComponent;\n  let url = 'https://api.mapbox.com/geocoding/v5/mapbox.places/';\n  url += \"\".concat(esc(searchTerm), \".json\");\n  let query = Object.keys(params).map(k => esc(k) + '=' + esc(params[k])).join('&');\n  url += '?';\n  url += query;\n  return url;\n}\nexport function constructDistanceMatrixURL(coordinateArray) {\n  let url = 'https://api.mapbox.com/directions-matrix/v1/mapbox/walking/';\n  let esc = encodeURIComponent;\n  url += coordinateArray.map(c => \"\".concat(c[1], \",\").concat(c[0])).join(';');\n  let params = {\n    annotations: 'distance',\n    access_token: ACCESS_TOKEN\n  };\n  let query = Object.keys(params).map(k => esc(k) + '=' + esc(params[k])).join('&');\n  url += '?';\n  url += query;\n  return url;\n}\n\nfunction toRadians(num) {\n  return num * (Math.PI / 180);\n}\n\nfunction calcHaversineDist(coord1, coord2) {\n  let lat1 = coord1[0],\n      lon1 = coord1[1],\n      lat2 = coord2[0],\n      lon2 = coord2[1];\n  let R = 6371e3; // metres\n\n  let φ1 = toRadians(lat1);\n  let φ2 = toRadians(lat2);\n  let Δφ = toRadians(lat2 - lat1);\n  let Δλ = toRadians(lon2 - lon1);\n  let a = Math.sin(Δφ / 2) * Math.sin(Δφ / 2) + Math.cos(φ1) * Math.cos(φ2) * Math.sin(Δλ / 2) * Math.sin(Δλ / 2);\n  let c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  let d = R * c;\n  return d;\n}\n\nfunction estimateClosestCoordinates(searchCoordinate, coordinateObject) {\n  let distanceArray = [];\n\n  for (let _ref3 of coordinateObject) {\n    var _ref4 = _slicedToArray(_ref3, 2);\n\n    let id = _ref4[0];\n    let stationCoordinate = _ref4[1];\n    let d = calcHaversineDist(searchCoordinate, stationCoordinate);\n    distanceArray.push([id, d]);\n  }\n\n  return distanceArray.sort((a, b) => a[1] - b[1]);\n}","map":{"version":3,"sources":["/Users/elliotgoldingfrank/bikephil-frontend/bikephilreact/src/actions.js"],"names":["fetch","CLICK_MARKER","EXPLORE_PANEL","SEARCH_PANEL","CLICK_PANEL","REQUEST_API_DATA","RECEIVE_API_DATA_SUCCESS","RECEIVE_API_DATA_FAILURE","REQUEST_DISTANCE_MATRIX","RECEIVE_DISTANCE_MATRIX_SUCCESS","RECEIVE_DISTANCE_MATRIX_FAILURE","clickMarker","id","isSelected","type","clickPanel","panel","produceStationsByID","stationsFullInfomation","stationsByID","Object","entries","value","subsetInfo","s","reducedStationInfo","coordinates","geometry","properties","kioskId","name","addressStreet","bikesAvailable","docksAvailable","requestAPIData","receiveAPIData","json","bikeTimestamp","timestamp","stations","weather","fetchAPIData","dispatch","then","response","error","console","log","requestDistanceMatrix","getCoordinateReference","map","data","zip","arr1","arr2","newArr","i","length","push","getClosestStationCoordinates","ids","lookup","x","fetchDistanceMatrix","coordinatesToLookUp","getState","api","coordinateReference","estimatedDistances","estimateClosestCoordinates","closestStationIDs","slice","JSON","stringify","closestStationCoordinates","coordinateArray","constructDistanceMatrixURL","distances","distanceArray","alert","receiveDistanceMatrix","ACCESS_TOKEN","constructSearchUrl","searchTerm","params","bbox","access_token","esc","encodeURIComponent","url","query","keys","k","join","c","annotations","toRadians","num","Math","PI","calcHaversineDist","coord1","coord2","lat1","lon1","lat2","lon2","R","φ1","φ2","Δφ","Δλ","a","sin","cos","atan2","sqrt","d","searchCoordinate","coordinateObject","stationCoordinate","sort","b"],"mappings":"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","sourcesContent":["import fetch from 'cross-fetch'\n\nexport const CLICK_MARKER = 'CLICK_MARKER'\n\nexport const EXPLORE_PANEL = 'EXPLORE_PANEL'\n\nexport const SEARCH_PANEL = 'SEARCH_PANEL'\n\nexport const CLICK_PANEL = 'CLICK_PANEL'\n// Action creators\n\nexport const REQUEST_API_DATA = 'REQUEST_API_DATA'\nexport const RECEIVE_API_DATA_SUCCESS = 'REQUEST_API_DATA_SUCCESS'\nexport const RECEIVE_API_DATA_FAILURE = 'REQUEST_API_DATA_FAILURE'\n\nexport const REQUEST_DISTANCE_MATRIX = 'REQUEST_DISTANCE_MATRIX'\nexport const RECEIVE_DISTANCE_MATRIX_SUCCESS = 'RECEIVE_DISTANCE_MATRIX_SUCCESS'\nexport const RECEIVE_DISTANCE_MATRIX_FAILURE = 'RECEIVE_DISTANCE_MATRIX_FAILURE'\n\nexport function clickMarker(id, isSelected){\n\treturn {\n\t\ttype: CLICK_MARKER,\n\t\tid,\n\t\tisSelected\n\t}\n}\n\nexport function clickPanel(panel){\n\treturn {\n\t\ttype: CLICK_PANEL,\n\t\tpanel\n\t}\n}\n\n\n\n//  Network Actions\n\n\n\n\n\nfunction produceStationsByID(stationsFullInfomation){\n\tconst stationsByID = {}\n\tfor (let [id, value] of Object.entries(stationsFullInfomation) ){\n\t\tstationsByID[id] = subsetInfo(value)\n\t}\n\treturn stationsByID\n}\n\nfunction subsetInfo(s){\n  const reducedStationInfo= {\n    coordinates:  [s.geometry.coordinates[1], s.geometry.coordinates[0]],\n    id: s.properties.kioskId,\n    name: s.properties.name,\n    addressStreet: s.properties.addressStreet,\n    bikesAvailable: s.properties.bikesAvailable,\n    docksAvailable: s.properties.docksAvailable,\n  }\n  return reducedStationInfo\n}\n\nexport function requestAPIData(){\n\treturn {\n\t\ttype: REQUEST_API_DATA\n\t}\n}\n\nexport function receiveAPIData(json){\n\treturn {\n\t\ttype: RECEIVE_API_DATA_SUCCESS,\n\t\tbikeTimestamp: json.timestamp,\n\t\tstationsByID: produceStationsByID(json.stations),\n\t\tweather: json.weather,\n\t}\n}\n\nexport function fetchAPIData(){\n\treturn dispatch => {\n\tdispatch(requestAPIData);\n\treturn fetch('https://bike-philly.herokuapp.com/api/v1/stations')\n\t  .then(\n        response => response.json(),\n        error => console.log('An error occurred.', error)\n      )\n      .then(json => dispatch(receiveAPIData(json)))\n  }\n}\n\n\nexport function requestDistanceMatrix() {\n\treturn {\n\t\ttype: REQUEST_DISTANCE_MATRIX\n\t}\n}\n\nfunction getCoordinateReference(stationsByID){\n\treturn Object.entries(stationsByID)\n\t\t\t\t .map(([id, data]) => [id, data.coordinates]);\n}\n\nfunction zip(arr1, arr2){\n\t// assumes they are the same length\n\tlet newArr = []\n\tfor (let i=0; i<arr1.length; i++){\n\t\tnewArr.push([arr1[i], arr2[i]]);\n\t}\n\treturn newArr\n}\n\nfunction getClosestStationCoordinates(ids, lookup){\n\treturn ids.map(x => lookup[x].coordinates)\n}\n\n\nexport function fetchDistanceMatrix(coordinatesToLookUp){\n\treturn (dispatch, getState) => {\n\t\tdispatch(requestDistanceMatrix());\n\t\tlet stationsByID = getState().api.stationsByID\n\t\tlet coordinateReference = getCoordinateReference(stationsByID);\n\t\tlet estimatedDistances = estimateClosestCoordinates(coordinatesToLookUp, coordinateReference)\n\t\t\n\t\t// Get closest 24 stations\n\t\tlet closestStationIDs = estimatedDistances.slice(0,24).map(x => x[0]);\n\t\tconsole.log(JSON.stringify(closestStationIDs));\n\n\t\tlet closestStationCoordinates = getClosestStationCoordinates(closestStationIDs, stationsByID);\n\t\tconsole.log(JSON.stringify(closestStationCoordinates));\n\n\t\t// Append coordinates to lookup to front\n\t\tlet coordinateArray = [coordinatesToLookUp, ...closestStationCoordinates];\n\t\tconsole.log(JSON.stringify(coordinateArray));\n\n\t\treturn fetch(constructDistanceMatrixURL(coordinateArray))\n\t\t\t\t.then(\n\t\t\t\t\tresponse => response.json(),\n\t\t\t\t\terror => console.log('An error occurred.', error)\n\t\t\t\t)\n\t\t\t\t.then(json => {\n\t\t\t\t\tconsole.log(closestStationIDs)\n\t\t\t\t\tconsole.log(json.distances[0])\n\t\t\t\t\treturn null\n\t\t\t\t\tlet distanceArray = zip(['0', closestStationIDs], json.distances[0]);\n\t\t\t\t\talert(distanceArray);\n\t\t\t\t\tdispatch(receiveDistanceMatrix(distanceArray));\n\t\t\t\t})\n\n\t\t}\n}\n\nexport function receiveDistanceMatrix(distanceArray) {\n\treturn {\n\t\ttype: RECEIVE_DISTANCE_MATRIX_SUCCESS,\n\t\tdistanceArray,\n\t}\n}\n\n\nlet ACCESS_TOKEN = 'pk.eyJ1IjoiZWxsaW90Z2ZyYW5rIiwiYSI6ImNqd3V4aXFzZTBkMjA0YW4xNGFwNnU4cWwifQ.BsUA_68pUHaCU7v4PCKLKw'\n\nexport function constructSearchUrl(searchTerm){\n\tlet params = {\n\t\tbbox: '-76,39,-75,41',\n\t\taccess_token: ACCESS_TOKEN\n\t}\n\tlet esc = encodeURIComponent;\n\tlet url = 'https://api.mapbox.com/geocoding/v5/mapbox.places/';\n\turl += `${esc(searchTerm)}.json`;\n\tlet query = Object.keys(params)\n\t\t.map(k => esc(k) + '=' + esc(params[k]))\n\t\t.join('&');\n\turl += '?'\n\turl += query;\n\n\treturn url\n}\n\n\n\nexport function constructDistanceMatrixURL(coordinateArray){\n\n\tlet url = 'https://api.mapbox.com/directions-matrix/v1/mapbox/walking/'\n\tlet esc = encodeURIComponent;\n\turl += coordinateArray.map(c => `${c[1]},${c[0]}`).join(';')\n\n\tlet params = {\n\t\tannotations: 'distance',\n\t\taccess_token: ACCESS_TOKEN\n\t}\n\tlet query = Object.keys(params)\n\t\t.map(k => esc(k) + '=' + esc(params[k]))\n\t\t.join('&');\n\n\turl += '?';\n\turl += query;\n\n\treturn url\n}\n\n\n\nfunction toRadians(num){\n\treturn num * (Math.PI/180);\n}\n\nfunction calcHaversineDist(coord1, coord2){\n\tlet lat1 = coord1[0],\n\t\tlon1 = coord1[1],\n\t\tlat2 = coord2[0],\n\t\tlon2 = coord2[1];\n\tlet R = 6371e3; // metres\n\tlet φ1 = toRadians(lat1);\n\tlet φ2 = toRadians(lat2);\n\tlet Δφ = toRadians(lat2-lat1);\n\tlet Δλ = toRadians(lon2-lon1);\n\tlet a = Math.sin(Δφ/2) * Math.sin(Δφ/2) + Math.cos(φ1) * Math.cos(φ2) * Math.sin(Δλ/2) * Math.sin(Δλ/2);\n\tlet c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n\tlet d = R * c;\n\treturn d\n}\n\nfunction estimateClosestCoordinates(searchCoordinate, coordinateObject){\n\tlet distanceArray = []\n\tfor (let [id, stationCoordinate] of coordinateObject){\n\t\tlet d = calcHaversineDist(searchCoordinate, stationCoordinate);\n\t\tdistanceArray.push([id, d])\n\t}\n\treturn distanceArray.sort((a, b) => ( a[1] - b[1] ))\n}\n\n"]},"metadata":{},"sourceType":"module"}