{"ast":null,"code":"import _slicedToArray from \"/Users/elliotgoldingfrank/bikephil-frontend/bikephilreact/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport fetch from 'cross-fetch';\nexport const CLICK_MARKER = 'CLICK_MARKER';\nexport const EXPLORE_PANEL = 'EXPLORE_PANEL';\nexport const SEARCH_PANEL = 'SEARCH_PANEL';\nexport const CLICK_PANEL = 'CLICK_PANEL'; // Action creators\n\nexport const REQUEST_API_DATA = 'REQUEST_API_DATA';\nexport const FETCH_API_DATA_SUCCESS = 'FETCH_API_DATA_SUCCESS';\nexport const FETCH_API_DATA_FAILURE = 'FETCH_API_DATA_FAILURE';\nexport const RECEIVE_API_DATA = 'RECEIVE_API_DATA'; // export const FETCH_GEODATA_REQUEST = 'FETCH_GEODATA_REQUEST'\n// export const FETCH_GEODATA_SUCCESS = 'FETCH_GEODATA_SUCCESS'\n// export const FETCH_GEODATA_FAILURE = 'FETCH_GEODATA_FAILURE'\n\nexport function clickMarker(id, isSelected) {\n  return {\n    type: CLICK_MARKER,\n    id,\n    isSelected\n  };\n}\nexport function clickPanel(panel) {\n  return {\n    type: CLICK_PANEL,\n    panel\n  };\n} //  Network Actions\n\nfunction produceStationsByID(stationsFullInfomation) {\n  const stationsByID = {};\n\n  for (let _ref of Object.entries(stationsFullInfomation)) {\n    var _ref2 = _slicedToArray(_ref, 2);\n\n    let id = _ref2[0];\n    let value = _ref2[1];\n    stationsByID[id] = subsetInfo(value);\n  }\n\n  return stationsByID;\n}\n\nfunction subsetInfo(s) {\n  const reducedStationInfo = {\n    coordinates: [s.geometry.coordinates[1], s.geometry.coordinates[0]],\n    id: s.properties.kioskId,\n    name: s.properties.name,\n    addressStreet: s.properties.addressStreet,\n    bikesAvailable: s.properties.bikesAvailable,\n    docksAvailable: s.properties.docksAvailable\n  };\n  return reducedStationInfo;\n}\n\nexport function requestAPIData() {\n  return {\n    type: REQUEST_API_DATA\n  };\n}\nexport function receiveAPIData(json) {\n  return {\n    type: RECEIVE_API_DATA,\n    bikeTimestamp: json.timestamp,\n    stationsByID: produceStationsByID(json.stations),\n    weather: json.weather\n  };\n}\nexport function fetchAPIData(dispatch) {\n  dispatch(requestAPIData);\n  return fetch('https://bike-philly.herokuapp.com/api/v1/stations').then(response => response.json(), error => console.log('An error occurred.', error)).then(json => dispatch(receiveAPIData(json)));\n}\nexport function requestDistanceMatrix() {\n  return {\n    type: REQUEST_DISTANCE_MATRIX\n  };\n}\nexport function receiveDistanceMatrix(json) {\n  return {};\n}\nexport function fetchDistanceMatrix() {}\nexport function estimateDistances() {}\nlet ACCESS_TOKEN = 'pk.eyJ1IjoiZWxsaW90Z2ZyYW5rIiwiYSI6ImNqd3V4aXFzZTBkMjA0YW4xNGFwNnU4cWwifQ.BsUA_68pUHaCU7v4PCKLKw';\n\nfunction constructSearchUrl(searchTerm) {\n  let params = {\n    proximity: '39.953948,-75.165271',\n    access_token: ACCESS_TOKEN\n  };\n  let esc = encodeURIComponent;\n  let url = 'https://api.mapbox.com/geocoding/v5/mapbox.places/';\n  url += \"\".concat(esc(searchTerm), \".json\");\n  let query = Object.keys(params).map(k => esc(k) + '=' + esc(params[k])).join('&');\n  url += query;\n  return url;\n}\n\nfunction toRadians(num) {\n  return Math.PI * num / 180;\n}\n\nfunction calcHaversineDist(coord1, coord2) {\n  let lat1 = coord1[0],\n      lon1 = coord1[1],\n      lat2 = coord2[0],\n      lon2 = coord2[1];\n  let R = 6371e3; // metres\n\n  let φ1 = toRadians(lat1);\n  let φ2 = toRadians(lat2);\n  let Δφ = toRadians(lat2 - lat1);\n  let Δλ = toRadians(lon2 - lon1);\n  let a = Math.sin(Δφ / 2) * Math.sin(Δφ / 2) + Math.cos(φ1) * Math.cos(φ2) * Math.sin(Δλ / 2) * Math.sin(Δλ / 2);\n  let c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  let d = R * c;\n  return d;\n}\n\nfunction orderByEstimatedDistance(searchCoordinate, coordinateObject) {\n  let distanceArray = [];\n\n  for (let _ref3 of coordinateObject) {\n    var _ref4 = _slicedToArray(_ref3, 2);\n\n    let id = _ref4[0];\n    let stationCoordinate = _ref4[1];\n    let d = calcHaversineDist(searchCoordinate, stationCoordinate);\n    distanceArray.push([id, d]);\n  }\n\n  return distanceArray.sort((a, b) => a[1] - b[1]);\n}\n\n[39.953948, -75.165271];","map":{"version":3,"sources":["/Users/elliotgoldingfrank/bikephil-frontend/bikephilreact/src/actions.js"],"names":["fetch","CLICK_MARKER","EXPLORE_PANEL","SEARCH_PANEL","CLICK_PANEL","REQUEST_API_DATA","FETCH_API_DATA_SUCCESS","FETCH_API_DATA_FAILURE","RECEIVE_API_DATA","clickMarker","id","isSelected","type","clickPanel","panel","produceStationsByID","stationsFullInfomation","stationsByID","Object","entries","value","subsetInfo","s","reducedStationInfo","coordinates","geometry","properties","kioskId","name","addressStreet","bikesAvailable","docksAvailable","requestAPIData","receiveAPIData","json","bikeTimestamp","timestamp","stations","weather","fetchAPIData","dispatch","then","response","error","console","log","requestDistanceMatrix","REQUEST_DISTANCE_MATRIX","receiveDistanceMatrix","fetchDistanceMatrix","estimateDistances","ACCESS_TOKEN","constructSearchUrl","searchTerm","params","proximity","access_token","esc","encodeURIComponent","url","query","keys","map","k","join","toRadians","num","Math","PI","calcHaversineDist","coord1","coord2","lat1","lon1","lat2","lon2","R","φ1","φ2","Δφ","Δλ","a","sin","cos","c","atan2","sqrt","d","orderByEstimatedDistance","searchCoordinate","coordinateObject","distanceArray","stationCoordinate","push","sort","b"],"mappings":"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","sourcesContent":["import fetch from 'cross-fetch'\n\nexport const CLICK_MARKER = 'CLICK_MARKER'\n\nexport const EXPLORE_PANEL = 'EXPLORE_PANEL'\n\nexport const SEARCH_PANEL = 'SEARCH_PANEL'\n\nexport const CLICK_PANEL = 'CLICK_PANEL'\n// Action creators\n\nexport const REQUEST_API_DATA = 'REQUEST_API_DATA'\nexport const FETCH_API_DATA_SUCCESS = 'FETCH_API_DATA_SUCCESS'\nexport const FETCH_API_DATA_FAILURE = 'FETCH_API_DATA_FAILURE'\n\nexport const RECEIVE_API_DATA = 'RECEIVE_API_DATA'\n\n// export const FETCH_GEODATA_REQUEST = 'FETCH_GEODATA_REQUEST'\n// export const FETCH_GEODATA_SUCCESS = 'FETCH_GEODATA_SUCCESS'\n// export const FETCH_GEODATA_FAILURE = 'FETCH_GEODATA_FAILURE'\n\nexport function clickMarker(id, isSelected){\n\treturn {\n\t\ttype: CLICK_MARKER,\n\t\tid,\n\t\tisSelected\n\t}\n}\n\nexport function clickPanel(panel){\n\treturn {\n\t\ttype: CLICK_PANEL,\n\t\tpanel\n\t}\n}\n\n\n\n//  Network Actions\n\n\n\n\n\nfunction produceStationsByID(stationsFullInfomation){\n\tconst stationsByID = {}\n\tfor (let [id, value] of Object.entries(stationsFullInfomation) ){\n\t\tstationsByID[id] = subsetInfo(value)\n\t}\n\treturn stationsByID\n}\n\nfunction subsetInfo(s){\n  const reducedStationInfo= {\n    coordinates:  [s.geometry.coordinates[1], s.geometry.coordinates[0]],\n    id: s.properties.kioskId,\n    name: s.properties.name,\n    addressStreet: s.properties.addressStreet,\n    bikesAvailable: s.properties.bikesAvailable,\n    docksAvailable: s.properties.docksAvailable,\n  }\n  return reducedStationInfo\n}\n\nexport function requestAPIData(){\n\treturn {\n\t\ttype: REQUEST_API_DATA\n\t}\n}\n\nexport function receiveAPIData(json){\n\treturn {\n\t\ttype: RECEIVE_API_DATA,\n\t\tbikeTimestamp: json.timestamp,\n\t\tstationsByID: produceStationsByID(json.stations),\n\t\tweather: json.weather,\n\t}\n}\n\nexport function fetchAPIData(dispatch){\n\tdispatch(requestAPIData);\n\treturn fetch('https://bike-philly.herokuapp.com/api/v1/stations')\n\t  .then(\n        response => response.json(),\n        error => console.log('An error occurred.', error)\n      )\n      .then(json => dispatch(receiveAPIData(json)))\n}\n\n\nexport function requestDistanceMatrix() {\n\treturn {\n\t\ttype: REQUEST_DISTANCE_MATRIX\n\t}\n}\n\nexport function receiveDistanceMatrix(json) {\n\treturn {\n\n\t}\n}\n\nexport function fetchDistanceMatrix() {\n\n}\nexport function estimateDistances(){\n\n}\n\n\nlet ACCESS_TOKEN = 'pk.eyJ1IjoiZWxsaW90Z2ZyYW5rIiwiYSI6ImNqd3V4aXFzZTBkMjA0YW4xNGFwNnU4cWwifQ.BsUA_68pUHaCU7v4PCKLKw'\n\nfunction constructSearchUrl(searchTerm){\n\tlet params = {\n\t\tproximity: '39.953948,-75.165271',\n\t\taccess_token: ACCESS_TOKEN\n\t}\n\n\tlet esc = encodeURIComponent;\n\tlet url = 'https://api.mapbox.com/geocoding/v5/mapbox.places/';\n\t\n\turl += `${esc(searchTerm)}.json`;\n\n\tlet query = Object.keys(params)\n\t\t.map(k => esc(k) + '=' + esc(params[k]))\n\t\t.join('&');\n\n\turl += query;\n\n\treturn url\n}\n\nfunction toRadians(num){\n\treturn Math.PI * num / 180;\n}\n\nfunction calcHaversineDist(coord1, coord2){\n\tlet lat1 = coord1[0],\n\t\tlon1 = coord1[1],\n\t\tlat2 = coord2[0],\n\t\tlon2 = coord2[1];\n\tlet R = 6371e3; // metres\n\tlet φ1 = toRadians(lat1);\n\tlet φ2 = toRadians(lat2);\n\tlet Δφ = toRadians(lat2-lat1);\n\tlet Δλ = toRadians(lon2-lon1);\n\tlet a = Math.sin(Δφ/2) * Math.sin(Δφ/2) + Math.cos(φ1) * Math.cos(φ2) * Math.sin(Δλ/2) * Math.sin(Δλ/2);\n\tlet c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n\tlet d = R * c;\n\treturn d\n}\n\nfunction orderByEstimatedDistance(searchCoordinate, coordinateObject){\n\tlet distanceArray = []\n\tfor (let [id, stationCoordinate] of coordinateObject){\n\t\tlet d = calcHaversineDist(searchCoordinate, stationCoordinate);\n\t\tdistanceArray.push([id, d])\n\t}\n\treturn distanceArray.sort((a, b) => ( a[1] - b[1] ))\n}\n\n\n[39.953948,-75.165271]\n\n"]},"metadata":{},"sourceType":"module"}