{"ast":null,"code":"import _slicedToArray from \"/Users/elliotgoldingfrank/bikephil-frontend/bikephilreact/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport fetch from 'cross-fetch';\nexport const CLICK_MARKER = 'CLICK_MARKER';\nexport const EXPLORE_PANEL = 'EXPLORE_PANEL';\nexport const SEARCH_PANEL = 'SEARCH_PANEL';\nexport const CLICK_PANEL = 'CLICK_PANEL'; // Action creators\n\nexport const REQUEST_API_DATA = 'REQUEST_API_DATA';\nexport const FETCH_API_DATA_SUCCESS = 'FETCH_API_DATA_SUCCESS';\nexport const FETCH_API_DATA_FAILURE = 'FETCH_API_DATA_FAILURE';\nexport const RECEIVE_API_DATA = 'RECEIVE_API_DATA'; // export const FETCH_GEODATA_REQUEST = 'FETCH_GEODATA_REQUEST'\n// export const FETCH_GEODATA_SUCCESS = 'FETCH_GEODATA_SUCCESS'\n// export const FETCH_GEODATA_FAILURE = 'FETCH_GEODATA_FAILURE'\n\nexport function clickMarker(id, isSelected) {\n  return {\n    type: CLICK_MARKER,\n    id,\n    isSelected\n  };\n}\nexport function clickPanel(panel) {\n  return {\n    type: CLICK_PANEL,\n    panel\n  };\n} //  Network Actions\n\nexport function requestAPIData() {\n  return {\n    type: REQUEST_API_DATA\n  };\n}\n\nfunction subsetInfo(stationInfo) {\n  const reducedStationInfo = {\n    coordinates: [stationInfo.geometry.coordinates[1], stationInfo.geometry.coordinates[0]],\n    id: stationInfo.properties.kioskId,\n    name: stationInfo.properties.name,\n    addressStreet: stationInfo.properties.addressStreet,\n    bikesAvailable: stationInfo.properties.bikesAvailable,\n    docksAvailable: stationInfo.properties.docksAvailable\n  };\n  return reducedStationInfo;\n}\n\nfunction produceStationsByID(stationsFullInfomation) {\n  const stationsByID = {};\n\n  for (let _ref of Object.entries(stationsFullInfomation)) {\n    var _ref2 = _slicedToArray(_ref, 2);\n\n    let id = _ref2[0];\n    let value = _ref2[1];\n    stationsByID[id] = subsetInfo(value);\n  }\n\n  return stationsByID;\n}\n\nexport function receiveAPIData(json) {\n  return {\n    type: RECEIVE_API_DATA,\n    bikeTimestamp: json.timestamp,\n    stationsByID: produceStationsByID(json.stations),\n    weather: json.weather\n  };\n}\nexport function fetchAPIData(dispatch) {\n  dispatch(requestAPIData);\n  return fetch('https://bike-philly.herokuapp.com/api/v1/stations').then(response => response.json(), error => console.log('An error occurred.', error)).then(json => dispatch(receiveAPIData(json)));\n}\n\nfunction toRadians(num) {\n  return Math.PI * num / 180;\n}\n\nfunction calcHaversineDist(coord1, coord2) {\n  let lat1 = coord1[0],\n      lon1 = coord1[1],\n      lat2 = coord2[0],\n      lon2 = coord2[1];\n  let R = 6371e3; // metres\n\n  let φ1 = toRadians(lat1);\n  let φ2 = toRadians(lat2);\n  let Δφ = toRadians(lat2 - lat1);\n  let Δλ = toRadians(lon2 - lon1);\n  let a = Math.sin(Δφ / 2) * Math.sin(Δφ / 2) + Math.cos(φ1) * Math.cos(φ2) * Math.sin(Δλ / 2) * Math.sin(Δλ / 2);\n  let c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  let d = R * c;\n  return d;\n}\n\nfunction orderByEstimatedDistance(coordinateLookup, coordinateObject) {\n  let newArray;\n  distanceArray.sort(function (a, b) {\n    return a - b;\n  });\n}","map":{"version":3,"sources":["/Users/elliotgoldingfrank/bikephil-frontend/bikephilreact/src/actions.js"],"names":["fetch","CLICK_MARKER","EXPLORE_PANEL","SEARCH_PANEL","CLICK_PANEL","REQUEST_API_DATA","FETCH_API_DATA_SUCCESS","FETCH_API_DATA_FAILURE","RECEIVE_API_DATA","clickMarker","id","isSelected","type","clickPanel","panel","requestAPIData","subsetInfo","stationInfo","reducedStationInfo","coordinates","geometry","properties","kioskId","name","addressStreet","bikesAvailable","docksAvailable","produceStationsByID","stationsFullInfomation","stationsByID","Object","entries","value","receiveAPIData","json","bikeTimestamp","timestamp","stations","weather","fetchAPIData","dispatch","then","response","error","console","log","toRadians","num","Math","PI","calcHaversineDist","coord1","coord2","lat1","lon1","lat2","lon2","R","φ1","φ2","Δφ","Δλ","a","sin","cos","c","atan2","sqrt","d","orderByEstimatedDistance","coordinateLookup","coordinateObject","newArray","distanceArray","sort","b"],"mappings":"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","sourcesContent":["import fetch from 'cross-fetch'\n\nexport const CLICK_MARKER = 'CLICK_MARKER'\n\nexport const EXPLORE_PANEL = 'EXPLORE_PANEL'\n\nexport const SEARCH_PANEL = 'SEARCH_PANEL'\n\nexport const CLICK_PANEL = 'CLICK_PANEL'\n// Action creators\n\nexport const REQUEST_API_DATA = 'REQUEST_API_DATA'\nexport const FETCH_API_DATA_SUCCESS = 'FETCH_API_DATA_SUCCESS'\nexport const FETCH_API_DATA_FAILURE = 'FETCH_API_DATA_FAILURE'\n\nexport const RECEIVE_API_DATA = 'RECEIVE_API_DATA'\n\n// export const FETCH_GEODATA_REQUEST = 'FETCH_GEODATA_REQUEST'\n// export const FETCH_GEODATA_SUCCESS = 'FETCH_GEODATA_SUCCESS'\n// export const FETCH_GEODATA_FAILURE = 'FETCH_GEODATA_FAILURE'\n\nexport function clickMarker(id, isSelected){\n\treturn {\n\t\ttype: CLICK_MARKER,\n\t\tid,\n\t\tisSelected\n\t}\n}\n\nexport function clickPanel(panel){\n\treturn {\n\t\ttype: CLICK_PANEL,\n\t\tpanel\n\t}\n}\n\n\n\n//  Network Actions\n\nexport function requestAPIData(){\n\treturn {\n\t\ttype: REQUEST_API_DATA\n\t}\n}\n\nfunction subsetInfo(stationInfo){\n  const reducedStationInfo= {\n    coordinates:  [stationInfo.geometry.coordinates[1], stationInfo.geometry.coordinates[0]],\n    id: stationInfo.properties.kioskId,\n    name: stationInfo.properties.name,\n    addressStreet: stationInfo.properties.addressStreet,\n    bikesAvailable:stationInfo.properties.bikesAvailable,\n    docksAvailable:stationInfo.properties.docksAvailable,\n  }\n  return reducedStationInfo\n}\n\n\nfunction produceStationsByID(stationsFullInfomation){\n\tconst stationsByID = {}\n\tfor (let [id, value] of Object.entries(stationsFullInfomation) ){\n\t\tstationsByID[id] = subsetInfo(value)\n\t}\n\treturn stationsByID\n}\nexport function receiveAPIData(json){\n\treturn {\n\t\ttype: RECEIVE_API_DATA,\n\t\tbikeTimestamp: json.timestamp,\n\t\tstationsByID: produceStationsByID(json.stations),\n\t\tweather: json.weather,\n\t}\n}\n\nexport function fetchAPIData(dispatch){\n\tdispatch(requestAPIData);\n\treturn fetch('https://bike-philly.herokuapp.com/api/v1/stations')\n\t  .then(\n        response => response.json(),\n        error => console.log('An error occurred.', error)\n      )\n      .then(json => dispatch(receiveAPIData(json)))\n}\n\n\nfunction toRadians(num){\n\treturn Math.PI * num / 180;\n}\nfunction calcHaversineDist(coord1, coord2){\n\tlet lat1 = coord1[0],\n\t\tlon1 = coord1[1],\n\t\tlat2 = coord2[0],\n\t\tlon2 = coord2[1];\n\tlet R = 6371e3; // metres\n\tlet φ1 = toRadians(lat1);\n\tlet φ2 = toRadians(lat2);\n\tlet Δφ = toRadians(lat2-lat1);\n\tlet Δλ = toRadians(lon2-lon1);\n\tlet a = Math.sin(Δφ/2) * Math.sin(Δφ/2) + Math.cos(φ1) * Math.cos(φ2) * Math.sin(Δλ/2) * Math.sin(Δλ/2);\n\tlet c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n\tlet d = R * c;\n\treturn d\n}\n\nfunction orderByEstimatedDistance(coordinateLookup, coordinateObject){\n\tlet newArray \n\tdistanceArray.sort(function(a, b){return a-b}\n)\n}"]},"metadata":{},"sourceType":"module"}