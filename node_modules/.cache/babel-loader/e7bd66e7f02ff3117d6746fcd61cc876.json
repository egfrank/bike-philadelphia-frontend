{"ast":null,"code":"import { StationList } from '../components/StationList';\nimport { connect } from 'react-redux';\nimport { EXPLORE_PANEL, SEARCH_PANEL } from '../actions';\n\nconst getVisibleStations = function (stationsByID, selectedStations, panel) {\n  switch (panel) {\n    case SEARCH_PANEL:\n      return Object.values(stationsByID);\n\n    case EXPLORE_PANEL:\n      return selectedStations.map(sID => stationsByID[sID]);\n  }\n};\n\nconst mapStateToProps = state => {\n  return {\n    stationArray: getVisibleStations(state.stationsByID, state.selectedStations, state.panel)\n  };\n};\n\nconst VisibleStations = connect(mapStateToProps, null)(StationList);\nexport default VisibleStations;","map":{"version":3,"sources":["/Users/elliotgoldingfrank/bikephil-frontend/bikephilreact/src/containers/VisibleStations.js"],"names":["StationList","connect","EXPLORE_PANEL","SEARCH_PANEL","getVisibleStations","stationsByID","selectedStations","panel","Object","values","map","sID","mapStateToProps","state","stationArray","VisibleStations"],"mappings":"AAAA,SAASA,WAAT,QAA4B,2BAA5B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,aAAT,EAAwBC,YAAxB,QAA4C,YAA5C;;AAEA,MAAMC,kBAAkB,GAAG,UAAUC,YAAV,EAAwBC,gBAAxB,EAA0CC,KAA1C,EAAgD;AAC1E,UAAQA,KAAR;AACC,SAAKJ,YAAL;AACC,aAAOK,MAAM,CAACC,MAAP,CAAcJ,YAAd,CAAP;;AACD,SAAKH,aAAL;AACC,aAAOI,gBAAgB,CAACI,GAAjB,CAAsBC,GAAG,IAAIN,YAAY,CAACM,GAAD,CAAzC,CAAP;AAJF;AAMA,CAPD;;AASA,MAAMC,eAAe,GAAGC,KAAK,IAAI;AAChC,SAAO;AACNC,IAAAA,YAAY,EAAEV,kBAAkB,CAACS,KAAK,CAACR,YAAP,EAAqBQ,KAAK,CAACP,gBAA3B,EAA6CO,KAAK,CAACN,KAAnD;AAD1B,GAAP;AAGA,CAJD;;AAMA,MAAMQ,eAAe,GAAGd,OAAO,CAC9BW,eAD8B,EAE9B,IAF8B,CAAP,CAGtBZ,WAHsB,CAAxB;AAKA,eAAee,eAAf","sourcesContent":["import { StationList } from '../components/StationList'\nimport { connect } from 'react-redux'\nimport { EXPLORE_PANEL, SEARCH_PANEL } from '../actions'\n\nconst getVisibleStations = function (stationsByID, selectedStations, panel){\n\tswitch (panel) {\n\t\tcase SEARCH_PANEL:\n\t\t\treturn Object.values(stationsByID)\n\t\tcase EXPLORE_PANEL:\n\t\t\treturn selectedStations.map( sID => stationsByID[sID] )\n\t}\n};\n\nconst mapStateToProps = state => {\n\treturn {  \n\t\tstationArray: getVisibleStations(state.stationsByID, state.selectedStations, state.panel)\n\t}\n};\n\nconst VisibleStations = connect(\n\tmapStateToProps,\n\tnull\n)(StationList);\n\nexport default VisibleStations"]},"metadata":{},"sourceType":"module"}