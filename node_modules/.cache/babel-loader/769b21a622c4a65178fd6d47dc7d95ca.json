{"ast":null,"code":"var _jsxFileName = \"/Users/elliotgoldingfrank/bikephil-frontend/bikephilreact/src/containers/SearchBarWrapper.js\";\nimport { connect } from 'react-redux';\nimport React from 'react';\nimport { fetchDistanceMatrix } from '../actions';\n\nclass SearchBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: ''\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({\n      input: event.target.value\n    });\n  }\n\n  handleSubmit() {\n    let coordinateSubmission = [this.state.input.split(',').map(x => +x)];\n    let coordinateArray = coordinateSubmission.concat(this.props.coordinateReference);\n    this.props.searchForDistanceMatrix(coordinateArray);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, \"Type in a new Message:\"), React.createElement(\"input\", {\n      value: this.state.input,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, \"Submit\"), this.props.distanceArray && alert(this.props.distanceArray));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    submittedCoordinates: state.submittedCoordinates,\n    coordinateReference: Object.values(state.api.stationsByID).map(x => x.coordinates),\n    distanceArray: state.distanceArray\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    searchForDistanceMatrix: coordinateArray => {\n      dispatch(fetchDistanceMatrix(coordinateArray));\n    }\n  };\n};\n\nconst SearchBarWrapper = connect(mapStateToProps, mapDispatchToProps)(SearchBar);\nexport default SearchBarWrapper;","map":{"version":3,"sources":["/Users/elliotgoldingfrank/bikephil-frontend/bikephilreact/src/containers/SearchBarWrapper.js"],"names":["connect","React","fetchDistanceMatrix","SearchBar","Component","constructor","props","state","input","handleChange","bind","handleSubmit","event","setState","target","value","coordinateSubmission","split","map","x","coordinateArray","concat","coordinateReference","searchForDistanceMatrix","render","distanceArray","alert","mapStateToProps","submittedCoordinates","Object","values","api","stationsByID","coordinates","mapDispatchToProps","dispatch","SearchBarWrapper"],"mappings":";AAAA,SAASA,OAAT,QAAwB,aAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,mBAAT,QAAoC,YAApC;;AAEA,MAAMC,SAAN,SAAwBF,KAAK,CAACG,SAA9B,CAAuC;AACtCC,EAAAA,WAAW,CAACC,KAAD,EAAO;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACZC,MAAAA,KAAK,EAAE;AADK,KAAb;AAGG,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBD,IAAlB,CAAuB,IAAvB,CAApB;AAEH;;AAGDD,EAAAA,YAAY,CAACG,KAAD,EAAO;AAClB,SAAKC,QAAL,CAAc;AACVL,MAAAA,KAAK,EAAEI,KAAK,CAACE,MAAN,CAAaC;AADV,KAAd;AAGA;;AAGDJ,EAAAA,YAAY,GAAE;AACb,QAAIK,oBAAoB,GAAG,CAAC,KAAKT,KAAL,CAAWC,KAAX,CAAiBS,KAAjB,CAAuB,GAAvB,EAA4BC,GAA5B,CAAgCC,CAAC,IAAI,CAACA,CAAtC,CAAD,CAA3B;AACA,QAAIC,eAAe,GAAGJ,oBAAoB,CAACK,MAArB,CAA4B,KAAKf,KAAL,CAAWgB,mBAAvC,CAAtB;AACA,SAAKhB,KAAL,CAAWiB,uBAAX,CAAmCH,eAAnC;AACA;;AAEDI,EAAAA,MAAM,GAAG;AACR,WACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCADD,EAEC;AACA,MAAA,KAAK,EAAE,KAAKjB,KAAL,CAAWC,KADlB;AAEA,MAAA,QAAQ,EAAE,KAAKC,YAFf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFD,EAI+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJ/B,EAKC;AAAQ,MAAA,OAAO,EAAE,KAAKE,YAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBALD,EAMG,KAAKL,KAAL,CAAWmB,aAAX,IAA4BC,KAAK,CAAC,KAAKpB,KAAL,CAAWmB,aAAZ,CANpC,CADD;AAUA;;AApCqC;;AA0CvC,MAAME,eAAe,GAAIpB,KAAD,IAAW;AACjC,SAAO;AACNqB,IAAAA,oBAAoB,EAAErB,KAAK,CAACqB,oBADtB;AAENN,IAAAA,mBAAmB,EAAEO,MAAM,CAACC,MAAP,CAAcvB,KAAK,CAACwB,GAAN,CAAUC,YAAxB,EAAsCd,GAAtC,CAA0CC,CAAC,IAAIA,CAAC,CAACc,WAAjD,CAFf;AAGNR,IAAAA,aAAa,EAAElB,KAAK,CAACkB;AAHf,GAAP;AAKD,CAND;;AAQA,MAAMS,kBAAkB,GAAIC,QAAD,IAAc;AACvC,SAAO;AACLZ,IAAAA,uBAAuB,EAAGH,eAAD,IAAqB;AAC3Ce,MAAAA,QAAQ,CAACjC,mBAAmB,CAACkB,eAAD,CAApB,CAAR;AACF;AAHI,GAAP;AAKD,CAND;;AASA,MAAMgB,gBAAgB,GAAGpC,OAAO,CAAC2B,eAAD,EAAkBO,kBAAlB,CAAP,CAA6C/B,SAA7C,CAAzB;AAGA,eAAeiC,gBAAf","sourcesContent":["import { connect } from 'react-redux'\nimport React from 'react';\nimport { fetchDistanceMatrix } from '../actions'\n\nclass SearchBar extends React.Component{\n\tconstructor(props){\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\tinput: ''\n\t\t}\n\t    this.handleChange = this.handleChange.bind(this);\n\t    this.handleSubmit = this.handleSubmit.bind(this);\n\n\t}\n\t\n\n\thandleChange(event){\n\t\tthis.setState({\n    \t\tinput: event.target.value\n    \t});\n\t}\n\n\n\thandleSubmit(){\n\t\tlet coordinateSubmission = [this.state.input.split(',').map(x => +x)];\n\t\tlet coordinateArray = coordinateSubmission.concat(this.props.coordinateReference);\n\t\tthis.props.searchForDistanceMatrix(coordinateArray, )\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h2>Type in a new Message:</h2>\n\t\t\t\t<input\n\t\t\t\tvalue={this.state.input}\n\t\t\t\tonChange={this.handleChange}/><br/>\n\t\t\t\t<button onClick={this.handleSubmit}>Submit</button>\n\t\t\t\t{ this.props.distanceArray && alert(this.props.distanceArray) }\n\t\t\t</div>\n\t\t)\n\t}\n}\n\n\n\n\nconst mapStateToProps = (state) => {\n  return {\n  \tsubmittedCoordinates: state.submittedCoordinates,\n  \tcoordinateReference: Object.values(state.api.stationsByID).map(x => x.coordinates),\n  \tdistanceArray: state.distanceArray\n  \t}\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    searchForDistanceMatrix: (coordinateArray) => {\n      \tdispatch(fetchDistanceMatrix(coordinateArray))\n    }\n  }\n};\n \n\nconst SearchBarWrapper = connect(mapStateToProps, mapDispatchToProps)(SearchBar);\n\n\nexport default SearchBarWrapper;"]},"metadata":{},"sourceType":"module"}